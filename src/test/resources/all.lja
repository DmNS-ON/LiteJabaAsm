module TM

extern std fun println

#0 fun println
#1 1
#2 "Слава России!"
#3 12
#4 21
#5 "Какой-то там текст..."
#6 var text
#7 fun foo
#8 0
#9 "Foo!"
#10 label skip_label
#11 2
#12 fun `add
#13 10
#14 label for_label
#15 36
#16 fun subroutine
#17 label array_fill
#18 label array_fill_end
#19 label array_print
#20 label array_print_end
#21 202.213

var text

fun main:1
    ; Вывод: Слава России!
    push 2      ; (2 - константа) [-> "Слава России!"]
    call 0 1    ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) ["Слава России!" ->]

    ; Вывод: 33
    push 3      ; (3 - константа) [-> 12]
    push 4      ; (4 - константа) [12 -> 12, 21]
    add         ; [12, 21 -> 33]
    call 0 1    ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) [33 ->]

    ; Вывод: 21
    push 3      ; (3 - константа) [-> 12]
    push 4      ; (4 - константа) [12 -> 12, 21]
    call 0 1    ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) [12, 21 -> 12]
    pop         ; [12 ->]

    ; Вывод: 12
    push 3      ; (3 - константа) [-> 12]
    push 4      ; (4 - константа) [12 -> 12, 21]
    swap        ; [12, 21 -> 21, 12]
    call 0 1    ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) [21, 12 -> 21]
    pop         ; [21 ->]

    ; Вывод: Какой-то там текст...
    push 5      ; (5 - константа) [-> "Какой-то там текст..."]
    setg 6      ; (6 - глобальная переменная) ["Какой-то там текст"] -> global:text
    getg 6      ; (6 - глобальная переменная) global:text -> ["Какой-то там текст"]
    call 0 1    ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) ["Какой-то там текст" ->]

    ; Вывод: Foo!
    call 7 8    ; вызывает функцию `foo` (7 - функция, 8 - кол-во параметров) [->]

    jmp 10      ; переход на метку `skip_label` (10 - метка) [->]

    ; Код тут не выполняется

    skip_label: ; метка `skip_label` []

    nop         ; ничего не делаем [->]

    ; Вывод: 202.213 202.213
    push 21     ; (3 - константа) [-> 202.213]
    dup         ; [202.213 -> 202.213, 202.213]
    call 0 11   ; вызывает функцию `вывода` (0 - функция, 11 - кол-во параметров) [202.213, 202.213 ->]

    ; Вывод: 33
    push 3      ; (3 - константа) [-> 12]
    push 4      ; (4 - константа) [-> 21]
    call 12 11  ; вызывает функцию `add` (12 - функция, 11 - кол-во параметров) [12, 21 -> 33]
    call 0 1    ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) [33 ->]

    ; Вывод: 0 ... 9
    push 8      ; (8 - константа) [-> 0]
    for_label:  ; метка `for_label` [i]
    dup         ; [i -> i, i]
    call 0 1    ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) [i, i -> i]
    push 1      ; (1 - константа) [i -> i, 1]
    add         ; [i, 1 -> (i+1)]
    dup         ; [i -> i, i]
    push 13     ; (13 - константа) [i, i -> i, i, 10]
    cmpgt       ; [i, i, 10 -> i, (10 > i)]
    jmpif 14    ; условный переход на метку `for_label` (14 - метка) [i, (10 > i) -> i]
    pop         ; [i ->]

    ; Вывод: 6
    push 15     ; (15 - константа) [-> 36]
    jmps 16     ; вызывает подпрограмму `subroutine` (16 - функция) [36 ->]

    ; Вывод: Слава России!
    push 2  ; (2 - константа) [-> "Слава России!"]
    push 1  ; (1 - константа) ["Слава России!" -> "Слава России!", 1]
    push 0  ; (0 - константа) ["Слава России!", 1 -> "Слава России!", 1, println]
    stcall  ; вызывает функцию в стеке ["Слава России!", 1, println ->]

    ; Вывод: 0 ... 9
    ; |0| создание массива
    push 13         ; (13 - константа) [-> 10]
    ac              ; создаёт массив [10 -> arr]
    ; |1| заполнение массива
    push 8          ; (0 - константа) [arr -> arr, 0]
    array_fill:     ; метка `array_fill` [arr, i]
    setl 8          ; (8 - локальная переменная) [arr, i -> arr] -> local:0
    dup             ; [arr -> arr, arr]
    getl 8          ; (8 - локальная переменная) local:0 -> [arr, arr -> arr, arr, i]
    swap            ; [arr, arr, i -> arr, i, arr]
    al              ; [arr, i, arr -> arr, i, (arr.length)]
    push 1          ; (1 - константа) [arr, i, j -> arr, i, j, 1]
    swap            ; [arr, i, j, 1 -> arr, i, 1, j]
    sub             ; [arr, i, 1, j -> arr, i, (1 - j)]
    cmpls           ; [arr, i, j -> arr, (j < i)]
    jmpif 18        ; условный переход на метку `array_fill_end` (18 - метка) [arr, (i < j) -> arr]
    dup             ; [arr -> arr, arr]
    getl 8          ; (8 - локальная переменная) local:0 -> [arr, arr -> arr, arr, i]
    swap            ; [arr, arr, i -> arr, i, arr]
    getl 8          ; (8 - локальная переменная) local:0 -> [arr, i, arr -> arr, i, arr, i]
    swap            ; [arr, i, arr, i -> arr, i, i, arr]
    as              ; [arr, i, i, arr -> arr] -> arr[i]
    getl 8          ; (8 - локальная переменная) local:0 -> [arr -> arr, i]
    push 1          ; (1 - константа) [arr, i -> arr, i, 1]
    add             ; [arr, i, 1 -> arr, (i + 1)]
    jmp 17          ; переход на метку `array_fill` (17 - метка) [arr, i]
    array_fill_end: ; метка `array_fill_end` [arr]
    ; |2| вывод массива
    push 8          ; (8 - константа) [arr -> arr, 0]
    array_print:    ; метка `array_print` [arr, i]
    setl 8          ; (8 - локальная переменная) [arr, i -> arr] -> local:0
    dup             ; [arr -> arr, arr]
    getl 8          ; (8 - константа) local:0 -> [arr, arr -> arr, arr, i]
    swap            ; [arr, arr, i -> arr, i, arr]
    al              ; [arr, i, arr -> arr, i, (arr.length)]
    push 1          ; (1 - константа) [arr, i, j -> arr, i, j, 1]
    swap            ; [arr, i, j, 1 -> arr, i, 1, j]
    sub             ; [arr, i, 1, j -> arr, i, (j - 1)]
    cmpls           ; [arr, i, j -> arr, (j < i)]
    jmpif 20        ; условный переход на метку `array_fill_end` (20 - метка) [arr, (j < i) -> arr]
    dup             ; [arr -> arr, arr]
    getl 8          ; (8 - локальная переменная) local:0 -> [arr, arr -> arr, arr, i]
    swap            ; [arr, arr, i -> arr, i, arr]
    ag              ; arr[i] -> [arr, i, arr -> arr, i]
    call 0 1        ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) [arr, i -> arr]
    getl 8          ; (8 - локальная переменная) local:0 -> [arr -> arr, i]
    push 1          ; (1 - константа) [arr, i -> arr, i, 1]
    add             ; [arr, i, 1 -> arr, (i + 1)]
    jmp 19          ; переход на метку `array_print` (19 - метка) [arr, i]
    array_print_end:; метка `array_print_end` [arr]
    pop             ; [arr ->]

    ret         ; выход из функции []

fun foo:0
    push 9      ; (9 - константа) [-> "Foo!"]
    call 0 1    ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) ["Foo!" ->]
    ret         ; выходит из функции []

fun `add:0
    add         ; [a, b -> (a+b)]
    retv        ; выход из функции с возвратом значения [(a+b)]

fun subroutine:0
    swap        ; [i, ctx -> ctx, i]
    push 13     ; (13 - константа) [ctx, i -> ctx, i, 10]
    swap        ; [ctx, i, 10 -> ctx, 10, i]
    mod         ; [ctx, 10, i -> ctx, (i % 10)]
    call 0 1    ; вызывает функцию `вывода` (0 - функция, 1 - кол-во параметров) [ctx, (i % 10) -> ctx]
    rets        ; выход из подпрограммы [ctx ->]
